within Dynawo.Electrical.Controls.Converters;

model OneGFM_GridInertie
  parameter Types.ActivePowerPu PRefLoadPu = 1 "Active power request for the load in pu (base SnRef)";
  parameter Types.ReactivePowerPu QRefLoadPu = 0 "Reactive power request for the load in pu (base SnRef)";
  
  

// /*====== GFM =======*/
  /*Inputs*/
   parameter Complex i0Pu = Complex(0, 0) "Start value of the complex current at ACPower PCC connection in pu (base UNom,SNom)";
   parameter Complex u0Pu = Complex(1,0)  "Start value of the complex voltage at ACPower PCC connection in pu (base UNom)";
   parameter Real PRef0Pu = 0 "start value of the reference active power (SRef, UNom)";
   parameter Real QRef0Pu = 0 "start-value of the reactive power reference  input (base UNom, SNom) (generator convention) ";
   parameter Real UFilterRef0Pu = 1 "start-value of the module voltage reference to be reached after the RLC filter connection point (base UNom, SNom)";
  

  /*RLConnection*/
  parameter Real idPcc0Pu = 0 "Start value of the d-axis current at the grid connection point in pu (base UNom, SNom) (generator convention)";
  parameter Real iqPcc0Pu = 0 "Start value of the q-axis current at the grid connection point in pu (base UNom, SNom) (generator convention)";
  parameter Real omega0Pu = 1 "Start value of the angular reference frequency for the VSC system(omega) ";
  parameter Real udFilter0Pu =0.99 "Start value of the d-axis voltage after the RLC filter in pu (base UNom, SNom)";
  parameter Real uqFilter0Pu = 0 "Start value of the q-axis voltage after the RLC filter in pu (base UNom, SNom)";
  parameter Real udPcc0Pu = 0.99 "Start value of the q-axis voltage at the grid connection point in pu (base UNom, SNom)";
  parameter Real uqPcc0Pu = 0 "Start value of the d-axis voltage at the grid connection point in pu (base UNom, SNom)";
  /*Measurement Pcc*/
  parameter Real PGen0Pu = 0 "Start value of active power generated by the converter at the PCC in pu (base UNom, SnRef) (generator convention)";
  parameter Real QGen0Pu = 0 "Start value of reactive power generated by the converter at the PCC in pu (base UNom, SnRef) (generator convention)";
  parameter Real UPolar0Pu = 0.99 "Start value of voltage angle at ACPower PCC connection in rad";
  parameter Real UPolarPhase0 = 0 "Start value of voltage module at ACPower PCC connection in pu (base UNom)";
  
  parameter Real theta0 = 0 "Start value of phase shift between the converter's rotating frame and the grid rotating frame in rad";
  
  parameter Real PFilter0Pu = 0 "Active Power at the RLC filter point connection in pu (base UNom, SNom)";
  parameter Real QFilter0Pu = 0 "Reactive Power at the RLC filter point connection in pu (base UNom, SNom)";
  parameter Real idConv0Pu = 0 "d-axis currrent at the inverter bridge output in pu (base UNom, SNom) (generator convention)";
  parameter Real iqConv0Pu = 0.06 "q-axis currrent at the inverter bridge output in pu (base UNom, SNom) (generator convention)";
  parameter Real udConv0Pu = 0.98 "The d-axis voltage at the inverter bridge output in pu (base UNom, SNom)";
  parameter Real uqConv0Pu =0 "The q-axis voltage at the inverter bridge output in pu (base UNom, SNom)";
  /*VoltageFilterControl*/
  parameter Real idConvRef0Pu =0.01 "Start value of the d-axis current reference injected by the converter in pu (base UNom, SNom) (generator convention)";
  parameter Real iqConvRef0Pu = 0.06 "Start value of the q-axis current reference injected by the converter in pu (base UNom, SNom) (generator convention)";
  parameter Real udFilterRef0Pu = 1 "Start value of the d-axis voltage reference after the RLC filter in pu (base UNom, SNom)";
  parameter Real uqFilterRef0Pu = 0 "Start value of the q-axis voltage reference after the RLC filter in pu (base UNom, SNom)";
  /*VoltageFilterReference*/
  parameter Real DeltaVVId0 = 0 "d-axis delta voltage virtual impedance (base UNom, SNom)";
  parameter Real DeltaVVIq0 = 0 "q-axis delta voltage virtual impedance (base UNom, SNom)";
  parameter Real QMesure0Pu = 0 "start-value of the reactive power mesured (base UNom, SNom) (generator convention)";
  
  //VirtualImpedance
  parameter Real RVI0 = 0.02 "Start value of virtual resistance in pu (base UNom, SNom)";
  parameter Real XVI0 = 0.21 "Start value of virtual reactance in pu (base UNom, SNom)";
  //CurrentSaturation
  parameter Real CurrentModule0 = 0.06 "start value of the Module of the current in dq representation idConvPu,iqConvPu";
  parameter Real CurrentAngle0 = 1.57 "start value of the Phase Angle of the current in dq representation idConvPu,iqConvPu";
  parameter Real idConvSatRef0Pu = 0 "start value of the satured-value of id";
  parameter Real iqConvSatRef0Pu = 0.06 "start value of the satured-value of iq";
  /*CurrentFilterLoop*/
  parameter Real udConvRef0Pu = 0.98 "d-axis voltage reference at the inverter bridge output in pu (base UNom, SNom)";
  parameter Real uqConvRef0Pu = 0 "q-axis voltage reference at the inverter bridge output in pu (base UNom, SNom)";
  //Droop Controls
  parameter Real omegaPLL0Pu = 1 "start value of PLL Frequency  in pu (base omegaNom)";
  parameter Real omegaRef0Pu = 1 "start value of frequency system reference in pu (base omegaNom)";
  parameter Real PMesure0Pu = 0 "start value of the active power mesured, base (SRef, UNom) ";
  parameter Real omegaSetSelected0Pu = 1 "start value of the angular frequency selected";
  
  
  /*Test Measurements*/
  
  Real RoCoF "frequency change";
  
  Dynawo.Electrical.Controls.Converters.DroopControlV3 GFM(CurrentAngle0 = CurrentAngle0, CurrentModule0 = CurrentModule0, DeltaVVId0 = DeltaVVId0, DeltaVVIq0 = DeltaVVIq0, LTransformer = 0.0001, PFilter0Pu = PFilter0Pu, PGen0Pu = PGen0Pu, PMesure0Pu = PMesure0Pu, PRef0Pu = PRef0Pu, QFilter0Pu = QFilter0Pu, QGen0Pu = QGen0Pu, QMesure0Pu = QMesure0Pu, QRef0Pu = QRef0Pu, RTransformer = 0.0001, RVI0 = RVI0, SNom = SystemBase.SnRef * 1.2, UFilterRef0Pu = UFilterRef0Pu, UPolar0Pu = UPolar0Pu, UPolarPhase0 = UPolarPhase0, Wref_FromPLL = true, XVI0 = XVI0, i0Pu = i0Pu, idConv0Pu = idConv0Pu, idConvRef0Pu = idConvRef0Pu, idConvSatRef0Pu = idConvSatRef0Pu, idPcc0Pu = idPcc0Pu, iqConv0Pu = iqConv0Pu, iqConvRef0Pu = iqConvRef0Pu, iqConvSatRef0Pu = iqConvSatRef0Pu, iqPcc0Pu = iqPcc0Pu, omega0Pu = omega0Pu, omegaPLL0Pu = omegaPLL0Pu, omegaRef0Pu = omegaRef0Pu, omegaSetSelected0Pu = omegaSetSelected0Pu, theta0 = theta0, u0Pu = u0Pu, udConv0Pu = udConv0Pu, udConvRef0Pu = udConvRef0Pu, udFilter0Pu = udFilter0Pu, udFilterRef0Pu = udFilterRef0Pu, udPcc0Pu = udPcc0Pu, uqConv0Pu = uqConv0Pu, uqConvRef0Pu = uqConvRef0Pu, uqFilter0Pu = uqFilter0Pu, uqFilterRef0Pu = uqFilterRef0Pu, uqPcc0Pu = uqPcc0Pu) annotation(
    Placement(visible = true, transformation(origin = {6, 54}, extent = {{-32, -32}, {32, 32}}, rotation = 0)));
  Modelica.Blocks.Sources.Step Qref(height = 0, offset = 0, startTime = 0) annotation(
    Placement(visible = true, transformation(origin = {-136, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Step Uref(height = 0, offset = 1, startTime = 0) annotation(
    Placement(visible = true, transformation(origin = {-138, 42}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Step Pref(height = 0, offset = 0.9, startTime = 0) annotation(
    Placement(visible = true, transformation(origin = {-136, 6}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Dynawo.Examples.GridForming.AcGrid acGrid(H = 5,SNom = SystemBase.SnRef * 2, U0pu = 1, UPhase = 0, UPhase0 = 0, Upu = 1) annotation(
    Placement(visible = true, transformation(origin = {-52, -44}, extent = {{-24, -24}, {24, 24}}, rotation = 0)));
  Lines.Line line(BPu = 0.00003, GPu = 0, RPu = 0.05, XPu = 0.5) annotation(
    Placement(visible = true, transformation(origin = {104, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Dynawo.Electrical.Loads.LoadPQ loadPQ(u0Pu = Complex(1, 0))  annotation(
    Placement(visible = true, transformation(origin = {186, -4}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
equation
  line.switchOffSignal1.value = false;
  line.switchOffSignal2.value = false;
  loadPQ.switchOffSignal1.value =  if time > 10 and time < 50 then true else false ;
  loadPQ.switchOffSignal2.value = if time > 10 and time < 50 then true else false;
  loadPQ.deltaQ = 0;
  loadPQ.deltaP = 0;
  loadPQ.PRefPu = PRefLoadPu;
  loadPQ.QRefPu = QRefLoadPu;
  
     GFM.switchOffSignal1.value = false;
  GFM.switchOffSignal2.value = false;
   GFM.switchOffSignal3.value = false;
   
//     when time >= 25  then
// // loadPQ.deltaP = pre(loadPQ.deltaP) + 0 ;//(base SnRef)
//   loadPQ.deltaP = 1.5 ;//(base SnRef)
   
//  end when;
  
  RoCoF = der(GFM.omegaPu);
  
  connect(Qref.y, GFM.QrefPu) annotation(
    Line(points = {{-125, 80}, {-88, 80}, {-88, 81}, {-31, 81}}, color = {0, 0, 127}));
  connect(Uref.y, GFM.UFilterRefPu) annotation(
    Line(points = {{-127, 42}, {-110, 42}, {-110, 67}, {-31, 67}}, color = {0, 0, 127}));
  connect(Pref.y, GFM.PrefPu) annotation(
    Line(points = {{-125, 6}, {-106, 6}, {-106, 53}, {-30, 53}}, color = {0, 0, 127}));
  connect(acGrid.omegaPu, GFM.OmegaRefPu) annotation(
    Line(points = {{-25, -58}, {40, -58}, {40, -12}, {-82, -12}, {-82, 38}, {-30, 38}}, color = {0, 0, 127}));
  connect(acGrid.aCPower, line.terminal1) annotation(
    Line(points = {{-24, -27}, {76, -27}, {76, 12}, {94, 12}}, color = {0, 0, 255}));
  connect(GFM.PCC, line.terminal2) annotation(
    Line(points = {{44, 57}, {126, 57}, {126, 12}, {114, 12}}, color = {0, 0, 255}));
  connect(loadPQ.terminal, line.terminal1) annotation(
    Line(points = {{186, -4}, {94, -4}, {94, 12}}, color = {0, 0, 255}));
  annotation(
    Diagram(coordinateSystem(extent = {{-160, 100}, {200, -80}})),
    experiment(StartTime = 0, StopTime = 50, Tolerance = 1e-06, Interval = 0.0001));
end OneGFM_GridInertie;