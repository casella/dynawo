within Dynawo.Electrical.Controls.Converters.BaseControls;

model MeasurementPcc
  
  Dynawo.Connectors.ACPower terminal(V(re(start=u0Pu.re),im(start=u0Pu.im)),i(re(start=i0Pu.re),im(start=i0Pu.im))) "Connector used to connect the converter to the grid" annotation(
    Placement(visible = true, transformation(origin = {110, -42}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-70, -188}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealOutput udPccPu(start=udPcc0Pu) "d-axis voltage at the PCC in pu (base UNom)" annotation(
    Placement(visible = true, transformation(origin = {110, 68}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {110, 78}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealOutput uqPccPu(start=uqPcc0Pu) "q-axis voltage at the PCC in pu (base UNom)" annotation(
    Placement(visible = true, transformation(origin = {110, 34}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {110, 38}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealOutput PGenPu(start=PGen0Pu) "active power generated by the converter at the PCC in pu (base UNom, SnRef) (generator convention)" annotation(
    Placement(visible = true, transformation(origin = {100, -78}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {110, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealOutput QGenPu(start=QGen0Pu) "reactive power generated by the converter at the PCC in pu (base UNom, SnRef) (generator convention)" annotation(
    Placement(visible = true, transformation(origin = {104, -96}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {110, -132}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput theta(start=theta0) "phase shift between the converter's rotating frame and the grid rotating frame in rad" annotation(
    Placement(visible = true, transformation(origin = {-98, 60}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {0, 192}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  Modelica.Blocks.Interfaces.RealInput idPccPu(start=idPcc0Pu) "d-axis current at the grid connection point in pu (base UNom, SNom) (generator convention)" annotation(
    Placement(visible = true, transformation(origin = {-96, -6}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-110, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput iqPccPu(start=iqPcc0Pu) "q-axis current at the grid connection point in pu (base UNom, SNom) (generator convention)" annotation(
    Placement(visible = true, transformation(origin = {-94, -38}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-110, -44}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.ComplexBlocks.Interfaces.ComplexOutput uComplexPu "Complex voltage at the ACPower PCC connection in pu (base UNom) "   annotation(
    Placement(visible = true, transformation(origin = {110, -12}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {88, -190}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  Types.Angle UPolarPhase(start=UPolarPhase0) "Voltage angle at ACPower PCC connection in rad";
  Types.VoltageModulePu UPolarPu(start=UPolar0Pu)  "Voltage module at ACPower PCC connection in rad";
  
  
  parameter Types.ApparentPowerModule SNom "Nominal apparent power module for the converter";
  parameter Types.ComplexPerUnit u0Pu "Start value of the complex voltage at ACPower PCC connection in pu (base UNom)";
  parameter Types.ComplexPerUnit i0Pu "Start value of the complex current at ACPower PCC connection in pu (base UNom,SNom)";
  parameter Types.PerUnit udPcc0Pu "Start value of the d-axis voltage at the PCC in pu (base UNom)";
  parameter Types.PerUnit uqPcc0Pu "Start value of the q-axis voltage at the PCC in pu (base UNom)";
  parameter Types.PerUnit PGen0Pu "Start value of active power generated by the converter at the PCC in pu (base UNom, SNom) (generator convention)";
  parameter Types.PerUnit QGen0Pu "Start value of reactive power generated by the converter at the PCC in pu (base UNom, SNom) (generator convention)";
  parameter Types.PerUnit theta0 "Start value of phase shift between the converter's rotating frame and the grid rotating frame in rad";
  parameter Types.PerUnit idPcc0Pu "Start value of the d-axis current at the grid connection point in pu (base UNom, SNom) (generator convention)";
  parameter Types.PerUnit iqPcc0Pu "Start value of the q-axis current at the grid connection point in pu (base UNom, SNom) (generator convention)";
  parameter Types.Angle UPolarPhase0 "Start value of voltage angle at ACPower PCC connection in rad";
  parameter Types.VoltageModulePu UPolar0Pu "Start value of voltage module at ACPower PCC connection in pu (base UNom)";
  Types.PerUnit PSnRefPu "value of active power generated by the converter at the PCC in pu (base UNom, SnRef) (generator convention)";
  Types.PerUnit QSnRefPu "value of reactive power generated by the converter at the PCC in pu (base UNom, SnRef) (generator convention)";
  

equation
    /* Park's transformations dq */
    /*DQ reference frame change from network reference to converter reference in pu*/
    /*generator convention*/
    [udPccPu; uqPccPu] = [cos(theta), sin(theta); -sin(theta), cos(theta)] * [terminal.V.re; terminal.V.im];
    [idPccPu; iqPccPu] = - [cos(theta), sin(theta); -sin(theta), cos(theta)] * [terminal.i.re; terminal.i.im] * SystemBase.SnRef / SNom;
    
    /* Power Calculation in SnRef convention (generator convention) */
   // PGenPu = (udPccPu * idPccPu + uqPccPu * iqPccPu) * SNom / SystemBase.SnRef; 
  //  QGenPu = (uqPccPu * idPccPu - udPccPu * iqPccPu) * SNom / SystemBase.SnRef;
   
    /* Power Calculation in Snom convention (generator convention) */
    PGenPu = (udPccPu * idPccPu + uqPccPu * iqPccPu) ; 
    QGenPu = (uqPccPu * idPccPu - udPccPu * iqPccPu) ;
    
     /* Power Calculation in SnRef convention (generator convention) */
    PSnRefPu = (udPccPu * idPccPu + uqPccPu * iqPccPu)* SNom / SystemBase.SnRef ; 
    QSnRefPu = (uqPccPu * idPccPu - udPccPu * iqPccPu)* SNom / SystemBase.SnRef ;
    
    /*Complex voltage*/
    uComplexPu=terminal.V;
    
    /* Phase and Module calculation of voltage at ACPower PCC connection */
    UPolarPhase = Modelica.ComplexMath.arg(terminal.V);
    UPolarPu = Modelica.ComplexMath.'abs'(terminal.V);
    
annotation(
    Icon(graphics = {Rectangle(extent = {{-100, 180}, {100, -180}}), Text(extent = {{98, -98}, {-98, 98}}, textString = "MeasurementPCC"), Text(origin = {36, 210}, extent = {{-28, 10}, {28, -10}}, textString = "Theta"), Text(origin = {-157, 23}, lineColor = {28, 113, 216}, extent = {{-35, 13}, {35, -13}}, textString = "idPccPu"), Text(origin = {-157, -31}, lineColor = {28, 113, 216}, extent = {{-35, 13}, {35, -13}}, textString = "iqPccPu"), Text(origin = {153, 97}, lineColor = {255, 120, 0}, extent = {{-35, 13}, {35, -13}}, textString = "udPccPu"), Text(origin = {155, 53}, lineColor = {255, 120, 0}, extent = {{-35, 13}, {35, -13}}, textString = "uqPccPu"), Text(origin = {-32, -208}, extent = {{-28, 10}, {28, -10}}, textString = "uPu,ipu"), Text(origin = {108, -210}, extent = {{-28, 10}, {28, -10}}, textString = "uPu"), Text(origin = {155, -69}, extent = {{-35, 13}, {35, -13}}, textString = "PGenPu"), Text(origin = {157, -117}, extent = {{-35, 13}, {35, -13}}, textString = "QGenPu")}, coordinateSystem(extent = {{-100, -180}, {100, 180}})));
end MeasurementPcc;