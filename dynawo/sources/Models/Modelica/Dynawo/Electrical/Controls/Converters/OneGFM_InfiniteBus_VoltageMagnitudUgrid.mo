within Dynawo.Electrical.Controls.Converters;

model OneGFM_InfiniteBus_VoltageMagnitudUgrid
  parameter Types.ActivePowerPu PRefLoadPu = 0.1 "Active power request for the load in pu (base SnRef)";
  parameter Types.ReactivePowerPu QRefLoadPu = 0 "Reactive power request for the load in pu (base SnRef)";
 
  
  // /*====== GFM =======*/
  /*Inputs*/
  parameter Real SNom=SystemBase.SnRef * 2.5;
  parameter Complex i0Pu = Complex(0, 0) "Start value of the complex current at ACPower PCC connection in pu (base UNom,SNom)";
  parameter Complex u0Pu = Complex(0.99, 0) "Start value of the complex voltage at ACPower PCC connection in pu (base UNom)";
  parameter Real PRef0Pu = 0 "start value of the reference active power (SRef, UNom)";
  parameter Real QRef0Pu = 0 "start-value of the reactive power reference  input (base UNom, SNom) (generator convention) ";
  parameter Real UFilterRef0Pu = 1 "start-value of the module voltage reference to be reached after the RLC filter connection point (base UNom, SNom)";
  /*RLConnection*/
  parameter Real idPcc0Pu = 0 "Start value of the d-axis current at the grid connection point in pu (base UNom, SNom) (generator convention)";
  parameter Real iqPcc0Pu = 0 "Start value of the q-axis current at the grid connection point in pu (base UNom, SNom) (generator convention)";
  parameter Real omega0Pu = 1 "Start value of the angular reference frequency for the VSC system(omega) ";
  parameter Real udFilter0Pu = 0.99 "Start value of the d-axis voltage after the RLC filter in pu (base UNom, SNom)";
  parameter Real uqFilter0Pu = 0 "Start value of the q-axis voltage after the RLC filter in pu (base UNom, SNom)";
  parameter Real udPcc0Pu = 0.99 "Start value of the q-axis voltage at the grid connection point in pu (base UNom, SNom)";
  parameter Real uqPcc0Pu = 0 "Start value of the d-axis voltage at the grid connection point in pu (base UNom, SNom)";
  /*Measurement Pcc*/
  parameter Real PGen0Pu = 0 "Start value of active power generated by the converter at the PCC in pu (base UNom, SnRef) (generator convention)";
  parameter Real QGen0Pu = 0 "Start value of reactive power generated by the converter at the PCC in pu (base UNom, SnRef) (generator convention)";
  parameter Real UPolar0Pu = 0.99 "Start value of voltage angle at ACPower PCC connection in rad";
  parameter Real UPolarPhase0 = 0 "Start value of voltage module at ACPower PCC connection in pu (base UNom)";
  parameter Real theta0 = 0 "Start value of phase shift between the converter's rotating frame and the grid rotating frame in rad";
  parameter Real PFilter0Pu = 0 "Active Power at the RLC filter point connection in pu (base UNom, SNom)";
  parameter Real QFilter0Pu = 0 "Reactive Power at the RLC filter point connection in pu (base UNom, SNom)";
  parameter Real idConv0Pu = 0 "d-axis currrent at the inverter bridge output in pu (base UNom, SNom) (generator convention)";
  parameter Real iqConv0Pu = 0.06 "q-axis currrent at the inverter bridge output in pu (base UNom, SNom) (generator convention)";
  parameter Real udConv0Pu = 0.98 "The d-axis voltage at the inverter bridge output in pu (base UNom, SNom)";
  parameter Real uqConv0Pu = 0 "The q-axis voltage at the inverter bridge output in pu (base UNom, SNom)";
  /*VoltageFilterControl*/
  parameter Real idConvRef0Pu = 0.01 "Start value of the d-axis current reference injected by the converter in pu (base UNom, SNom) (generator convention)";
  parameter Real iqConvRef0Pu = 0.06 "Start value of the q-axis current reference injected by the converter in pu (base UNom, SNom) (generator convention)";
  parameter Real udFilterRef0Pu = 1 "Start value of the d-axis voltage reference after the RLC filter in pu (base UNom, SNom)";
  parameter Real uqFilterRef0Pu = 0 "Start value of the q-axis voltage reference after the RLC filter in pu (base UNom, SNom)";
  /*VoltageFilterReference*/
  parameter Real DeltaVVId0 = 0 "d-axis delta voltage virtual impedance (base UNom, SNom)";
  parameter Real DeltaVVIq0 = 0 "q-axis delta voltage virtual impedance (base UNom, SNom)";
  parameter Real QMesure0Pu = 0 "start-value of the reactive power mesured (base UNom, SNom) (generator convention)";
  //VirtualImpedance
  parameter Real RVI0 = 0.02 "Start value of virtual resistance in pu (base UNom, SNom)";
  parameter Real XVI0 = 0.21 "Start value of virtual reactance in pu (base UNom, SNom)";
  //CurrentSaturation
  parameter Real CurrentModule0 = 0.06 "start value of the Module of the current in dq representation idConvPu,iqConvPu";
  parameter Real CurrentAngle0 = 1.57 "start value of the Phase Angle of the current in dq representation idConvPu,iqConvPu";
  parameter Real idConvSatRef0Pu = 0 "start value of the satured-value of id";
  parameter Real iqConvSatRef0Pu = 0.06 "start value of the satured-value of iq";
  /*CurrentFilterLoop*/
  parameter Real udConvRef0Pu = 0.98 "d-axis voltage reference at the inverter bridge output in pu (base UNom, SNom)";
  parameter Real uqConvRef0Pu = 0 "q-axis voltage reference at the inverter bridge output in pu (base UNom, SNom)";
  //Droop Controls
  parameter Real omegaPLL0Pu = 1 "start value of PLL Frequency  in pu (base omegaNom)";
  parameter Real omegaRef0Pu = 1 "start value of frequency system reference in pu (base omegaNom)";
  parameter Real PMesure0Pu = 0 "start value of the active power mesured, base (SRef, UNom) ";
  parameter Real omegaSetSelected0Pu = 1 "start value of the angular frequency selected";
  /*Grid Measurement*/
  Types.PerUnit IgridModule "module of the current at the PCC point";
  /*ENTSOE Report Measurements*/
  Types.PerUnit DeltaIdDUT "Delta de Current at the DUT point ";
  Types.PerUnit IdSteadyState "Current at the DUT point in steady state after the event in SNom base";
  Types.PerUnit IdDUTDroopControl_theoric "Current at the DUT point calculated theoretically in SNom base";
  Real Thau;
  parameter Types.Time tOmegaEvtStart= 5 ;
  parameter Types.Time tOmegaEvtEnd = 5.001;

  parameter Types.Time tMagnitudeEvtstart = 15;
  parameter Types.Time tMagnitudeEvtEnd= 18 ;
  Types.PerUnit Xeff=0.15 "Xeffective to be set";
  Types.PerUnit Ufilter "Tension at the DUT output ";
  Types.PerUnit Uconv "Tension at the converter output ";
  Types.PerUnit UconvRe;
  Types.PerUnit UconvIm;
  Types.PerUnit UfilterRe;
  Types.PerUnit UfilterIm;
  Types.Angle AngleConv "Angle at the converter output";
  Types.Angle AngleFilter "Angle at the DUT points";
  Types.Angle DeltaAngleConv_Filter "Angle difference between the DUt and the converter output";
  Types.Angle DeltaAnglePcc_Grid;
 // Types.PerUnit IqPccTransfo_theoric;
 // Types.PerUnit IqPccLine_theoric;
  Types.PerUnit Upcc;
  Types.PerUnit Ugrid;
  Types.PerUnit IqDUTQequation_theoric "Current q-axis at the DUT point ";
  Types.PerUnit IdDUTPequation_theoric "Current d-qxis at the DUt point";
 Types.Angle AnglePcc;
  Types.Angle AngleGrid;
  
  // Define a discrete variable to store the previous value
  //Real previousValue(start=0);
  
  Dynawo.Electrical.Controls.Converters.DroopControlV3 GFM(CurrentAngle0 = CurrentAngle0, CurrentModule0 = CurrentModule0, DeltaVVId0 = DeltaVVId0, DeltaVVIq0 = DeltaVVIq0, Mq = 0, PFilter0Pu = PFilter0Pu, PGen0Pu = PGen0Pu, PMesure0Pu = PMesure0Pu, PRef0Pu = PRef0Pu, QFilter0Pu = QFilter0Pu, QGen0Pu = QGen0Pu, QMesure0Pu = QMesure0Pu, QRef0Pu = QRef0Pu, RVI0 = RVI0, SNom = SystemBase.SnRef * 10, UFilterRef0Pu = UFilterRef0Pu, UPolar0Pu = UPolar0Pu, UPolarPhase0 = UPolarPhase0, Wref_FromPLL = true, XVI0 = XVI0, i0Pu = i0Pu, idConv0Pu = idConv0Pu, idConvRef0Pu = idConvRef0Pu, idConvSatRef0Pu = idConvSatRef0Pu, idPcc0Pu = idPcc0Pu, iqConv0Pu = iqConv0Pu, iqConvRef0Pu = iqConvRef0Pu, iqConvSatRef0Pu = iqConvSatRef0Pu, iqPcc0Pu = iqPcc0Pu, omega0Pu = omega0Pu, omegaPLL0Pu = omegaPLL0Pu, omegaRef0Pu = omegaRef0Pu, omegaSetSelected0Pu = omegaSetSelected0Pu, theta0 = theta0, u0Pu = u0Pu, udConv0Pu = udConv0Pu, udConvRef0Pu = udConvRef0Pu, udFilter0Pu = udFilter0Pu, udFilterRef0Pu = udFilterRef0Pu, udPcc0Pu = udPcc0Pu, uqConv0Pu = uqConv0Pu, uqConvRef0Pu = uqConvRef0Pu, uqFilter0Pu = uqFilter0Pu, uqFilterRef0Pu = uqFilterRef0Pu, uqPcc0Pu = uqPcc0Pu) annotation(
    Placement(visible = true, transformation(origin = {-22, 46}, extent = {{-32, -32}, {32, 32}}, rotation = 0)));
  Modelica.Blocks.Sources.Step Qref(height = 0, offset = 0.01, startTime = 10) annotation(
    Placement(visible = true, transformation(origin = {-148, 72}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Step Uref(height = 0, offset = 1, startTime = 0) annotation(
    Placement(visible = true, transformation(origin = {-140, 36}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Step Pref(height = 0, offset = 0.9, startTime = 15) annotation(
    Placement(visible = true, transformation(origin = {-130, 2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Dynawo.Electrical.Lines.Line line(BPu = 0.00003, GPu = 0, RPu = 0.0066, XPu = 0.066) annotation(
    Placement(visible = true, transformation(origin = {94, -66}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Step step(height = 1, offset = 0, startTime = 0) annotation(
    Placement(visible = true, transformation(origin = {-118, -36}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Dynawo.Electrical.Buses.InfiniteBusWithVariations BusInfinite(U0Pu = 1, UEvtPu = 1.1, UPhase = 0, omega0Pu = 1, omegaEvtPu = 2, tOmegaEvtEnd = tOmegaEvtEnd, tOmegaEvtStart = tOmegaEvtStart, tUEvtEnd = tMagnitudeEvtEnd, tUEvtStart = tMagnitudeEvtstart)  annotation(
    Placement(visible = true, transformation(origin = {40, -66}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
equation
  line.switchOffSignal1.value = false;
  line.switchOffSignal2.value = false;
  GFM.switchOffSignal1.value = false;
  GFM.switchOffSignal2.value = false;
  GFM.switchOffSignal3.value = false;

  // Frequency variation
  if time > tOmegaEvtEnd  then
  // PSteadyState = pre(PSteadyState)+ GFM.measurementPcc.idPccPu;
      IdSteadyState=0.90;
      IdDUTDroopControl_theoric=DeltaIdDUT*exp((time-tOmegaEvtEnd)*Thau)+IdSteadyState;    
   // DeltaPtheoric=0;
   else
     IdSteadyState=0.90;
     IdDUTDroopControl_theoric=IdSteadyState;    
  end if ;
  
  Thau=-(GFM.droopControl.Mp)*2*3.14*50*Uconv*Ufilter/Xeff;
 // DeltaIdDUT= (-sin(0.131) + sin(0.104))/(Xeff);  //-sin(DeltaAngleINV_DUT,t=k)+sin(DeltaAngleINV_DUT,t=k+1)/(Xeff); When i have to test the DUT i cannot       acces to the AngleInv or AngleDUT
  DeltaIdDUT=-0.072*Uconv/Xeff;//-Delta(Angle)/Xeff

   
  // Uinv - Park's transformations dq-currents in generator convention, -> generation convention for terminal
    UconvRe = (cos(GFM.droopControl.theta) * GFM.VSC.udConvPu - sin(GFM.droopControl.theta) * GFM.VSC.uqConvPu) ;
    UconvIm = (sin(GFM.droopControl.theta) * GFM.VSC.udConvPu + cos(GFM.droopControl.theta) * GFM.VSC.uqConvPu) ;


 // Udut - Park's transformations dq-currents in generator convention, -> generation convention for terminal
    UfilterRe = (cos(GFM.droopControl.theta) * GFM.VSC.udFilterPu - sin(GFM.droopControl.theta) * GFM.VSC.uqFilterPu) ;
    UfilterIm = (sin(GFM.droopControl.theta) * GFM.VSC.udFilterPu + cos(GFM.droopControl.theta) * GFM.VSC.uqFilterPu) ;


   Ufilter = Modelica.ComplexMath.'abs'(Complex(UfilterRe,UfilterIm)); // Magnitude is calculated in Re, Im base
   Uconv= Modelica.ComplexMath.'abs'(Complex(UconvRe,UconvIm)); // Magnitude is calculated in Re, Im base
   Upcc =  GFM.measurementPcc.UPolarPu; //Magnitude is calculated in Re, Im base
   Ugrid = BusInfinite.UPu; // Magnitude is calculated in Re, Im base
    
  
  IgridModule = Modelica.ComplexMath.'abs'(line.terminal2.i);
  AngleConv = Modelica.ComplexMath.arg(Complex(UconvRe,UconvIm)); // Angles are calculated in Re, Im base
  AngleFilter = Modelica.ComplexMath.arg(Complex(UfilterRe,UfilterIm)); // Angles are calculated in Re, Im base
  AnglePcc = GFM.measurementPcc.UPolarPhase ; // Angles are calculated in Re, Im base
  AngleGrid = BusInfinite.UPhase - BusInfinite.UPhaseOffs; // Angle is calculated in Re,Im base
  DeltaAngleConv_Filter = AngleConv - AngleFilter ; // Angles are calculated in Re, Im
  DeltaAnglePcc_Grid = AnglePcc - AngleGrid; // angles are calculated in Re, Im (alfa and betha transform)
    
  
  IqDUTQequation_theoric = (Ufilter - Uconv*cos(DeltaAngleConv_Filter))/Xeff; //base SNom
  IdDUTPequation_theoric = Uconv*sin(DeltaAngleConv_Filter)/Xeff; //base SNom
 // IqPccLine_theoric=  -(Upcc - Ugrid*cos(DeltaAnglePCC_Grid))/line.XPu*SystemBase.SnRef/SNom; //base SNom
//  IqPccTransfo_theoric = -(Udut*cos(AngleDUT-AnglePcc)-Upcc)/GFM.RLConnection.LTransformer;
  
  
  connect(Qref.y, GFM.QrefPu) annotation(
    Line(points = {{-137, 72}, {-60, 72}}, color = {0, 0, 127}));
  connect(Pref.y, GFM.PrefPu) annotation(
    Line(points = {{-119, 2}, {-94, 2}, {-94, 46}, {-58, 46}}, color = {0, 0, 127}));
 connect(GFM.PCC, line.terminal2) annotation(
    Line(points = {{16, 48}, {104, 48}, {104, -66}}, color = {0, 0, 255}));
  connect(step.y, GFM.OmegaRefPu) annotation(
    Line(points = {{-107, -36}, {-88, -36}, {-88, 30}, {-58, 30}}, color = {0, 0, 127}));
  connect(Uref.y, GFM.UFilterRefPu) annotation(
    Line(points = {{-129, 36}, {-110, 36}, {-110, 60}, {-60, 60}}, color = {0, 0, 127}));
 connect(BusInfinite.terminal, line.terminal1) annotation(
    Line(points = {{40, -66}, {84, -66}}, color = {0, 0, 255}));
  annotation(
    Diagram(coordinateSystem(extent = {{-160, 100}, {200, -80}})),
    experiment(StartTime = 0, StopTime = 30, Tolerance = 1e-06, Interval = 0.001));
end OneGFM_InfiniteBus_VoltageMagnitudUgrid;