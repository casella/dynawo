diff --git a/extensions/iidm/src/BranchObservability.cpp b/extensions/iidm/src/BranchObservability.cpp
index 37a2602..1855cf1 100644
--- a/extensions/iidm/src/BranchObservability.cpp
+++ b/extensions/iidm/src/BranchObservability.cpp
@@ -34,35 +34,35 @@ const std::string& BranchObservability::getName() const {
 }
 
 stdcxx::CReference<ObservabilityQuality> BranchObservability::getQualityP1() const {
-    return stdcxx::cref(m_qualityP1);
+    return stdcxx::cref<ObservabilityQuality>(m_qualityP1);
 }
 
 stdcxx::Reference<ObservabilityQuality> BranchObservability::getQualityP1() {
-    return stdcxx::ref(m_qualityP1);
+    return stdcxx::ref<ObservabilityQuality>(m_qualityP1);
 }
 
 stdcxx::CReference<ObservabilityQuality> BranchObservability::getQualityP2() const {
-    return stdcxx::cref(m_qualityP2);
+    return stdcxx::cref<ObservabilityQuality>(m_qualityP2);
 }
 
 stdcxx::Reference<ObservabilityQuality> BranchObservability::getQualityP2() {
-    return stdcxx::ref(m_qualityP2);
+    return stdcxx::ref<ObservabilityQuality>(m_qualityP2);
 }
 
 stdcxx::CReference<ObservabilityQuality> BranchObservability::getQualityQ1() const {
-    return stdcxx::cref(m_qualityQ1);
+    return stdcxx::cref<ObservabilityQuality>(m_qualityQ1);
 }
 
 stdcxx::Reference<ObservabilityQuality> BranchObservability::getQualityQ1() {
-    return stdcxx::ref(m_qualityQ1);
+    return stdcxx::ref<ObservabilityQuality>(m_qualityQ1);
 }
 
 stdcxx::CReference<ObservabilityQuality> BranchObservability::getQualityQ2() const {
-    return stdcxx::cref(m_qualityQ2);
+    return stdcxx::cref<ObservabilityQuality>(m_qualityQ2);
 }
 
 stdcxx::Reference<ObservabilityQuality> BranchObservability::getQualityQ2() {
-    return stdcxx::ref(m_qualityQ2);
+    return stdcxx::ref<ObservabilityQuality>(m_qualityQ2);
 }
 
 const std::type_index& BranchObservability::getType() const {
diff --git a/include/powsybl/stdcxx/reference.hpp b/include/powsybl/stdcxx/reference.hpp
index ce81b0c..dde1c37 100644
--- a/include/powsybl/stdcxx/reference.hpp
+++ b/include/powsybl/stdcxx/reference.hpp
@@ -108,8 +108,8 @@ CReference<T> cref(const std::unique_ptr<T>& pointer) {
     return static_cast<bool>(pointer) ? CReference<T>(*pointer) : CReference<T>();
 }
 
-template <typename T, typename = typename std::enable_if<!std::is_abstract<T>::value>::type>
-CReference<T> cref(const stdcxx::optional<T>& optional) {
+template <typename T, typename U, typename = typename std::enable_if<!std::is_abstract<U>::value && std::is_same<T, U>::value>::type>
+CReference<T> cref(const stdcxx::optional<U>& optional) {
     return static_cast<bool>(optional) ? CReference<T>(*optional) : CReference<T>();
 }
 
@@ -138,8 +138,8 @@ Reference<T> ref(const std::unique_ptr<T>& pointer) {
     return static_cast<bool>(pointer) ? Reference<T>(*pointer) : Reference<T>();
 }
 
-template <typename T, typename = typename std::enable_if<!std::is_abstract<T>::value>::type>
-Reference<T> ref(stdcxx::optional<T>& optional) {
+template <typename T, typename U, typename = typename std::enable_if<!std::is_abstract<U>::value && std::is_same<T, U>::value>::type>
+Reference<T> ref(stdcxx::optional<U>& optional) {
     return static_cast<bool>(optional) ? Reference<T>(*optional) : Reference<T>();
 }
 
diff --git a/src/iidm/extensions/SlackTerminalXmlSerializer.cpp b/src/iidm/extensions/SlackTerminalXmlSerializer.cpp
index 35c5a49..8072774 100644
--- a/src/iidm/extensions/SlackTerminalXmlSerializer.cpp
+++ b/src/iidm/extensions/SlackTerminalXmlSerializer.cpp
@@ -55,7 +55,7 @@ Extension& SlackTerminalXmlSerializer::read(Extendable& extendable, converter::x
     }
     auto& voltageLevel = dynamic_cast<VoltageLevel&>(extendable);
     const std::string& id = context.getAnonymizer().deanonymizeString(context.getReader().getAttributeValue(converter::ID));
-    const std::string& side = context.getReader().getAttributeValue(converter::SIDE);
+    const std::string& side = context.getReader().getOptionalAttributeValue(converter::SIDE, "");
     Terminal& terminal = converter::xml::TerminalRefXml::readTerminalRef(voltageLevel.getNetwork(), id, side);
     extendable.newExtension<SlackTerminalAdder>().withTerminal(terminal).add();
     return extendable.getExtension<iidm::extensions::SlackTerminal>();
diff --git a/src/xml/XmlStreamWriter.cpp b/src/xml/XmlStreamWriter.cpp
index 17e2b54..9f80944 100644
--- a/src/xml/XmlStreamWriter.cpp
+++ b/src/xml/XmlStreamWriter.cpp
@@ -82,10 +82,9 @@ void XmlStreamWriter::writeEmptyElement(const std::string& uri, const std::strin
 }
 
 void XmlStreamWriter::writeEndDocument() {
-    int written = xmlTextWriterEndDocument(m_writer.get());
-    if (written < 0) {
-        throw XmlStreamException("Failed to write end document");
-    }
+    // deleting the xmlTextWriter pointer automatically calls xmlTextWriterFlush() and write to stream
+    // m_writer is instanciated in writeStartElement, so it must be deleted here
+    m_writer.reset();
 }
 
 void XmlStreamWriter::writeEndElement() {
@@ -150,11 +149,9 @@ void XmlStreamWriter::writeStartDocument(const std::string& encoding, const std:
     auto writeCallback = [](void* context, const char* buffer, int len) {
         XmlStreamWriter& writer = *static_cast<XmlStreamWriter*>(context);
 
-        size_t beforeWrite = writer.m_stream.tellp();
         writer.m_stream.write(buffer, len);
-        size_t afterWrite = writer.m_stream.tellp();
 
-        return static_cast<int>(afterWrite - beforeWrite);
+        return len;
     };
 
     auto closeCallback = [](void* /*context*/) {
